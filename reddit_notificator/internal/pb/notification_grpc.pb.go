// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: internal/pb/notification.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificatorServiceClient is the client API for NotificatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificatorServiceClient interface {
	Create(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
}

type notificatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificatorServiceClient(cc grpc.ClientConnInterface) NotificatorServiceClient {
	return &notificatorServiceClient{cc}
}

func (c *notificatorServiceClient) Create(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/NotificatorService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificatorServiceServer is the server API for NotificatorService service.
// All implementations should embed UnimplementedNotificatorServiceServer
// for forward compatibility
type NotificatorServiceServer interface {
	Create(context.Context, *NotificationRequest) (*NotificationResponse, error)
}

// UnimplementedNotificatorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificatorServiceServer struct {
}

func (UnimplementedNotificatorServiceServer) Create(context.Context, *NotificationRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

// UnsafeNotificatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificatorServiceServer will
// result in compilation errors.
type UnsafeNotificatorServiceServer interface {
	mustEmbedUnimplementedNotificatorServiceServer()
}

func RegisterNotificatorServiceServer(s grpc.ServiceRegistrar, srv NotificatorServiceServer) {
	s.RegisterService(&NotificatorService_ServiceDesc, srv)
}

func _NotificatorService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificatorServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NotificatorService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificatorServiceServer).Create(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificatorService_ServiceDesc is the grpc.ServiceDesc for NotificatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NotificatorService",
	HandlerType: (*NotificatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NotificatorService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pb/notification.proto",
}
